<Window
    x:Class="GARbro.GUI.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:jv="clr-namespace:JustView"
    xmlns:local="clr-namespace:GARbro.GUI"
    xmlns:p="clr-namespace:GARbro.GUI.Properties"
    xmlns:s="clr-namespace:GARbro.GUI.Strings"
    x:Name="AppWindow"
    Title="GARbro"
    Width="{Binding Source={x:Static p:Settings.Default}, Path=winWidth, Mode=TwoWay}"
    Height="{Binding Source={x:Static p:Settings.Default}, Path=winHeight, Mode=TwoWay}"
    MinHeight="250"
    AllowDrop="True"
    Drop="OnDropEvent"
    KeyDown="WindowKeyDown"
    Left="{Binding Source={x:Static p:Settings.Default}, Path=winLeft, Mode=TwoWay}"
    Loaded="WindowLoaded"
    ResizeMode="CanResizeWithGrip"
    Top="{Binding Source={x:Static p:Settings.Default}, Path=winTop, Mode=TwoWay}"
    WindowState="{Binding Source={x:Static p:Settings.Default}, Path=winState, Mode=TwoWay}">
    <Window.Resources>
        <!--  alternate colors for directory view  -->
        <SolidColorBrush x:Key="AlternateColor1" Color="#f2f5f9" />
        <SolidColorBrush x:Key="AlternateColor2" Color="White" />
        <SolidColorBrush x:Key="InactiveInputBackground" Color="#ebf5fe" />

        <!--  toolbar icons  -->
        <BitmapImage x:Key="Icon32x32Back" UriSource="Images/32x32/back button.png" />
        <BitmapImage x:Key="Icon32x32Forward" UriSource="Images/32x32/forward button.png" />
        <BitmapImage x:Key="Icon32x32Help" UriSource="Images/32x32/help.png" />
        <BitmapImage x:Key="Icon48x48Refresh" UriSource="Images/48x48/refresh.png" />

        <!--  directory view internals  -->
        <CollectionViewSource x:Key="ListViewSource" Source="{Binding}" />
        <local:BooleanToCollapsedVisibilityConverter x:Key="booleanToCollapsedVisibilityConverter" />
        <local:EntryTypeConverter x:Key="entryTypeConverter" />
        <local:SortModeToBooleanConverter x:Key="sortModeToBooleanConverter" />

        <Style x:Key="HeaderLeftAlign" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
        </Style>
        <DataTemplate x:Key="SortArrowUp">
            <DockPanel>
                <TextBlock Margin="5,0,5,0" Text="{Binding}" />
                <Path
                    VerticalAlignment="Center"
                    Data="M 5,5 15,5 10,0 5,5"
                    Fill="Gray" />
            </DockPanel>
        </DataTemplate>
        <DataTemplate x:Key="SortArrowDown">
            <DockPanel>
                <TextBlock Margin="5,0,5,0" Text="{Binding}" />
                <Path
                    VerticalAlignment="Center"
                    Data="M 5,0 10,5 15,0 5,0"
                    Fill="Gray" />
            </DockPanel>
        </DataTemplate>
        <DataTemplate x:Key="SortArrowNone">
            <TextBlock Margin="5,0,5,0" Text="{Binding}" />
        </DataTemplate>

        <Style x:Key="DefaultMenuItemStyle" TargetType="{x:Type MenuItem}">
            <Setter Property="FontWeight" Value="Bold" />
        </Style>

        <!--  Sort-by submenu  -->
        <MenuItem x:Key="sortByMenu" Header="{x:Static s:guiStrings.CtxMenuSortBy}">
            <MenuItem
                Command="{x:Static local:Commands.SortBy}"
                CommandParameter="Name"
                Header="{x:Static s:guiStrings.CtxMenuSortByName}"
                IsCheckable="True"
                IsChecked="{Binding ElementName=AppWindow, Path=SortMode, Mode=OneWay, Converter={StaticResource sortModeToBooleanConverter}, ConverterParameter=Name}" />
            <MenuItem
                Command="{x:Static local:Commands.SortBy}"
                CommandParameter="Type"
                Header="{x:Static s:guiStrings.CtxMenuSortByType}"
                IsCheckable="True"
                IsChecked="{Binding ElementName=AppWindow, Path=SortMode, Mode=OneWay, Converter={StaticResource sortModeToBooleanConverter}, ConverterParameter=Type}" />
            <MenuItem
                Command="{x:Static local:Commands.SortBy}"
                CommandParameter="Size"
                Header="{x:Static s:guiStrings.CtxMenuSortBySize}"
                IsCheckable="True"
                IsChecked="{Binding ElementName=AppWindow, Path=SortMode, Mode=OneWay, Converter={StaticResource sortModeToBooleanConverter}, ConverterParameter=Size}" />
            <MenuItem
                Command="{x:Static local:Commands.SortBy}"
                Header="{x:Static s:guiStrings.CtxMenuUnsorted}"
                IsCheckable="True"
                IsChecked="{Binding ElementName=AppWindow, Path=SortMode, Mode=OneWay, Converter={StaticResource sortModeToBooleanConverter}}" />
        </MenuItem>
        <!--  Default listview context menu  -->
        <ContextMenu x:Key="lvDirContextMenu">
            <MenuItem
                Command="{x:Static local:Commands.OpenItem}"
                Header="{x:Static s:guiStrings.CtxMenuOpen}"
                InputGestureText="Enter"
                Style="{StaticResource DefaultMenuItemStyle}" />
            <MenuItem
                Command="{x:Static local:Commands.CreateArchive}"
                Header="{x:Static s:guiStrings.CtxMenuCreate}"
                InputGestureText="F3"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}" />
            <MenuItem
                Command="{x:Static local:Commands.ExtractItem}"
                Header="{x:Static s:guiStrings.CtxMenuExtract}"
                InputGestureText="F4"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}" />
            <MenuItem Command="{x:Static local:Commands.AddSelection}" Header="{x:Static s:guiStrings.CtxMenuSelectByMask}" />
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuFileType}">
                <MenuItem
                    Command="{x:Static local:Commands.SetFileType}"
                    CommandParameter="{Binding}"
                    DataContext="image"
                    Header="{Binding Converter={StaticResource entryTypeConverter}}" />
                <MenuItem
                    Command="{x:Static local:Commands.SetFileType}"
                    CommandParameter="{Binding}"
                    DataContext="audio"
                    Header="{Binding Converter={StaticResource entryTypeConverter}}" />
                <MenuItem
                    Command="{x:Static local:Commands.SetFileType}"
                    CommandParameter="{Binding}"
                    DataContext="script"
                    Header="{Binding Converter={StaticResource entryTypeConverter}}" />
                <MenuItem
                    Command="{x:Static local:Commands.SetFileType}"
                    CommandParameter=""
                    Header="{x:Static s:guiStrings.Type_NONE}" />
            </MenuItem>
            <MenuItem
                Command="{x:Static local:Commands.ExploreItem}"
                Header="{x:Static s:guiStrings.CtxMenuExplorer}"
                InputGestureText="Ctrl+E"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}" />
            <MenuItem
                Command="{x:Static local:Commands.DeleteItem}"
                Header="{x:Static s:guiStrings.CtxMenuDelete}"
                InputGestureText="Del"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}" />
            <Separator />
            <!--
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuRename}" InputGestureText="F2"
                      Command="{x:Static local:Commands.RenameItem}"/>
            -->
            <MenuItem
                Command="{x:Static local:Commands.Refresh}"
                Header="{x:Static s:guiStrings.CtxMenuRefresh}"
                InputGestureText="F5" />
            <MenuItem
                Command="{x:Static local:Commands.ConvertMedia}"
                Header="{x:Static s:guiStrings.CtxMenuConvert}"
                InputGestureText="F6"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}" />
        </ContextMenu>

    </Window.Resources>
    <DockPanel LastChildFill="True">
        <StackPanel
            x:Name="MainMenuBar"
            DockPanel.Dock="Top"
            Orientation="Vertical"
            Visibility="{Binding Source={x:Static p:Settings.Default}, Path=winMenuBarVisibility, Mode=TwoWay}">
            <Menu Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" IsMainMenu="True">
                <MenuItem Header="{x:Static s:guiStrings.MenuFile}">
                    <MenuItem
                        Command="{x:Static local:Commands.OpenFile}"
                        Header="{x:Static s:guiStrings.MenuOpen}"
                        InputGestureText="Ctrl+O" />
                    <MenuItem
                        Command="{x:Static local:Commands.CreateArchive}"
                        Header="{x:Static s:guiStrings.CtxMenuCreate}"
                        InputGestureText="F3" />
                    <MenuItem
                        Command="{x:Static local:Commands.ConvertMedia}"
                        Header="{x:Static s:guiStrings.CtxMenuConvert}"
                        InputGestureText="F6" />
                    <MenuItem x:Name="RecentFilesMenu" Header="{x:Static s:guiStrings.MenuRecent}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Header" Value="{Binding Path=Item2}" />
                                <Setter Property="Command" Value="{x:Static local:Commands.OpenRecent}" />
                                <Setter Property="CommandParameter" Value="{Binding Path=Item1}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator />
                    <MenuItem
                        Command="{x:Static local:Commands.Exit}"
                        Header="{x:Static s:guiStrings.MenuExit}"
                        InputGestureText="Ctrl+Q" />
                </MenuItem>
                <MenuItem Header="{x:Static s:guiStrings.MenuView}">
                    <MenuItem
                        Command="{x:Static local:Commands.Preferences}"
                        Header="{x:Static s:guiStrings.MenuPreferences}"
                        InputGestureText="Ctrl+P" />
                    <Separator />
                    <MenuItem
                        Command="{x:Static local:Commands.FitWindow}"
                        Header="{x:Static s:guiStrings.MenuFitWindow}"
                        InputGestureText="Ctrl+H" />
                    <MenuItem
                        Command="{x:Static local:Commands.Refresh}"
                        Header="{x:Static s:guiStrings.CtxMenuRefresh}"
                        InputGestureText="F5" />
                    <Separator />
                    <MenuItem
                        Command="{x:Static local:Commands.HideToolBar}"
                        Header="{x:Static s:guiStrings.MenuToggleToolBar}"
                        InputGestureText="Alt+Shift+T" />
                    <MenuItem
                        Command="{x:Static local:Commands.HideMenuBar}"
                        Header="{x:Static s:guiStrings.MenuToggleMenuBar}"
                        InputGestureText="Alt+Shift+M" />
                    <MenuItem
                        Command="{x:Static local:Commands.HideStatusBar}"
                        Header="{x:Static s:guiStrings.MenuToggleStatusBar}"
                        InputGestureText="Alt+Shift+S" />
                    <Separator />
                    <StaticResource ResourceKey="sortByMenu" />
                </MenuItem>
                <MenuItem Header="{x:Static s:guiStrings.MenuHelp}">
                    <MenuItem Command="{x:Static local:Commands.About}" Header="{x:Static s:guiStrings.MenuAbout}" />
                    <MenuItem Command="{x:Static local:Commands.TroubleShooting}" Header="Troubleshooting..." />
                    <MenuItem Command="{x:Static local:Commands.CheckUpdates}" Header="{x:Static s:guiStrings.MenuCheckUpdates}" />
                </MenuItem>
            </Menu>
            <Separator Height="1" Margin="0" />
        </StackPanel>
        <Menu x:Name="HelperMenuBar" Visibility="Collapsed" />
        <DockPanel
            x:Name="MainToolBar"
            HorizontalAlignment="Stretch"
            Background="{Binding Path=Background, ElementName=HelperMenuBar}"
            DockPanel.Dock="Top"
            Visibility="{Binding Source={x:Static p:Settings.Default}, Path=winToolBarVisibility, Mode=TwoWay}">
            <DockPanel.Resources>
                <Style BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="{x:Type Button}">
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="Margin" Value="1,2,1,2" />
                </Style>
                <Style BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" TargetType="{x:Type ToggleButton}">
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="Margin" Value="2,2,2,2" />
                </Style>
                <Style BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" TargetType="{x:Type Separator}">
                    <Setter Property="Margin" Value="5,0,5,0" />
                </Style>
                <!--  Path input textbox mouseover highlight  -->
                <Style TargetType="{x:Type local:ExtAutoCompleteBox}">
                    <Setter Property="Background" Value="White" />
                    <Style.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsTextBoxFocused" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource InactiveInputBackground}" />
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="{x:Type Image}">
                    <Setter Property="UseLayoutRounding" Value="True" />
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <!--
                    <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Self}, Path=Source.Width}"/>
                    <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Self}, Path=Source.Height}"/>
                    <Setter Property="Stretch" Value="None"/>
                    -->
                    <Setter Property="Width" Value="24" />
                    <Setter Property="Height" Value="24" />
                    <Setter Property="Stretch" Value="Uniform" />
                    <!--
                        hack to make images within disabled toolbar buttons appear 'grayed out'.
                        This doesn't gray them at all, but lowers their opacity so the (usually gray)
                        background of the button shows through.  If WPF had a built-in facility for
                        grayscaling images in disabled buttons, this kind of icky kludgery wouldn't be
                        necessary
                    -->
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                            <Setter Property="Opacity" Value="0.33" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Resources>
            <Separator
                Height="1"
                Margin="0"
                DockPanel.Dock="Bottom" />
            <Button
                x:Name="ButtonBack"
                Margin="5,2,0,2"
                Command="{x:Static local:Commands.GoBack}"
                ToolTip="{x:Static s:guiStrings.TooltipBack}">
                <Image Source="{StaticResource Icon32x32Back}" />
            </Button>
            <Button
                x:Name="ButtonForward"
                Command="{x:Static local:Commands.GoForward}"
                ToolTip="{x:Static s:guiStrings.TooltipForward}">
                <Image Source="{StaticResource Icon32x32Forward}" />
            </Button>
            <Separator />
            <StackPanel x:Name="PathWidget" Orientation="Horizontal">
                <local:ExtAutoCompleteBox
                    x:Name="pathLine"
                    Width="100"
                    Height="22"
                    Margin="0"
                    BorderThickness="1,1,0,1" />
                <Button
                    Width="22"
                    Height="22"
                    Margin="0"
                    Background="{Binding ElementName=pathLine, Path=Background}"
                    BorderBrush="{Binding ElementName=pathLine, Path=BorderBrush}"
                    BorderThickness="1"
                    Command="{x:Static local:Commands.Refresh}"
                    ToolTip="{x:Static s:guiStrings.CtxMenuRefresh}">
                    <Image
                        Width="16"
                        Height="16"
                        Source="{StaticResource Icon48x48Refresh}" />
                </Button>
            </StackPanel>
            <StackPanel
                x:Name="EncodingWidget"
                Orientation="Horizontal"
                Visibility="{Binding ElementName=TextView, Path=Visibility}">
                <Separator />
                <TextBlock
                    Margin="5,0,5,0"
                    VerticalAlignment="Center"
                    Text="{x:Static s:guiStrings.LabelEncoding}" />
                <ComboBox
                    x:Name="EncodingChoice"
                    Height="22"
                    DisplayMemberPath="EncodingName"
                    IsEditable="False"
                    ItemsSource="{Binding ElementName=AppWindow, Path=TextEncodings}"
                    SelectedValue="{Binding Source={x:Static p:Settings.Default}, Path=appTextEncoding, Mode=TwoWay}"
                    SelectedValuePath="CodePage"
                    SelectionChanged="OnEncodingSelect" />
                <Separator />
            </StackPanel>
            <Button
                Margin="0,2,10,2"
                Command="{x:Static local:Commands.About}"
                DockPanel.Dock="Right"
                ToolTip="{x:Static s:guiStrings.MenuAbout}">
                <Image Source="{StaticResource Icon32x32Help}" />
            </Button>
            <TextBlock Visibility="Hidden" />
        </DockPanel>
        <StackPanel
            x:Name="AppStatusBar"
            DockPanel.Dock="Bottom"
            Visibility="{Binding Source={x:Static p:Settings.Default}, Path=winStatusBarVisibility, Mode=TwoWay}">
            <Separator Height="1" Margin="0" />
            <StatusBar>
                <StatusBarItem Width="{Binding ElementName=CurrentDirectory, Path=ActualWidth}">
                    <TextBlock x:Name="appStatusText" />
                </StatusBarItem>
                <Separator Width="1" />
                <StatusBarItem x:Name="appPlaybackControl" Visibility="Collapsed">
                    <Button
                        Width="18"
                        Height="18"
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center"
                        Command="{x:Static local:Commands.StopPlayback}">
                        <Rectangle
                            Width="8"
                            Height="8"
                            Fill="Black"
                            Stretch="Fill" />
                    </Button>
                </StatusBarItem>
                <StatusBarItem>
                    <TextBlock x:Name="appResourceText" />
                </StatusBarItem>
            </StatusBar>
        </StackPanel>
        <Grid
            x:Name="ContentGrid"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            DockPanel.Dock="Left"
            ShowGridLines="False">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Source={x:Static p:Settings.Default}, Path=lvPanelWidth, Mode=TwoWay}" MinWidth="200" />
                <ColumnDefinition Width="1" />
                <ColumnDefinition Width="*" MinWidth="100" />
            </Grid.ColumnDefinitions>
            <local:ListViewEx
                x:Name="CurrentDirectory"
                Grid.Column="0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                AlternationCount="2"
                BorderBrush="Transparent"
                BorderThickness="0"
                ContextMenu="{StaticResource lvDirContextMenu}"
                Foreground="Black"
                GridViewColumnHeader.Click="lv_ColumnHeaderClicked"
                IsSynchronizedWithCurrentItem="True"
                ItemsSource="{Binding Source={StaticResource ListViewSource}}"
                PreviewKeyDown="lv_KeyDown"
                PreviewTextInput="lv_TextInput"
                SelectedValuePath="Name"
                SelectionChanged="lv_SelectionChanged"
                SelectionMode="Extended">
                <ListView.Resources>
                    <SolidColorBrush x:Key="ItemInactiveBackground" Color="#ffcbcbcb" />
                </ListView.Resources>
                <ListView.InputBindings>
                    <KeyBinding Key="Enter" Command="{x:Static local:Commands.OpenItem}" />
                    <KeyBinding Command="{x:Static local:Commands.ExploreItem}" Gesture="Ctrl+E" />
                    <KeyBinding Command="{x:Static local:Commands.RenameItem}" Gesture="F2" />
                    <KeyBinding Command="{x:Static local:Commands.NextItem}" Gesture="Space" />
                    <KeyBinding Command="{x:Static local:Commands.CopyNames}" Gesture="Ctrl+Insert" />
                    <KeyBinding Command="{x:Static local:Commands.Descend}" Gesture="Ctrl+PageDown" />
                    <KeyBinding Command="{x:Static local:Commands.Ascend}" Gesture="Ctrl+PageUp" />
                    <MouseBinding Command="{x:Static local:Commands.OpenItem}" Gesture="LeftDoubleClick" />
                </ListView.InputBindings>
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <EventSetter Event="ListViewItem.MouseDoubleClick" Handler="lvi_DoubleClick" />
                        <Style.Triggers>
                            <!--  BEGIN alternate row color  -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="False" />
                                    <Condition Property="IsMouseOver" Value="False" />
                                    <Condition Property="ItemsControl.AlternationIndex" Value="0" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource AlternateColor1}" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="False" />
                                    <Condition Property="IsMouseOver" Value="False" />
                                    <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource AlternateColor2}" />
                            </MultiTrigger>
                            <!--  END alternate row color  -->
                            <!--  BEGIN context menu trigger  -->
                            <!--
                            <DataTrigger Binding="{Binding Path=IsArchive}" Value="True">
                                <Setter Property="ContextMenu" Value="{StaticResource lvArcContextMenu}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=IsArchive}" Value="False">
                                <Setter Property="ContextMenu" Value="{StaticResource lvDirContextMenu}"/>
                            </DataTrigger>
                            -->
                            <!--  END context menu trigger  -->
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.View>
                    <GridView AllowsColumnReorder="False">
                        <GridViewColumn
                            Width="{Binding Source={x:Static p:Settings.Default}, Path=lvNameColumnWidth, Mode=TwoWay}"
                            HeaderContainerStyle="{StaticResource HeaderLeftAlign}"
                            HeaderTemplate="{StaticResource SortArrowNone}">
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Content="{x:Static s:guiStrings.HeaderName}" Tag="Name" />
                            </GridViewColumn.Header>
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock x:Name="item_Name" Text="{Binding Path=Name}" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn
                            Width="{Binding Source={x:Static p:Settings.Default}, Path=lvTypeColumnWidth, Mode=TwoWay}"
                            DisplayMemberBinding="{Binding Path=Type, Mode=OneWay, Converter={StaticResource entryTypeConverter}}"
                            HeaderContainerStyle="{StaticResource HeaderLeftAlign}"
                            HeaderTemplate="{StaticResource SortArrowNone}">
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Content="{x:Static s:guiStrings.HeaderType}" Tag="Type" />
                            </GridViewColumn.Header>
                        </GridViewColumn>
                        <GridViewColumn
                            Width="{Binding Source={x:Static p:Settings.Default}, Path=lvSizeColumnWidth, Mode=TwoWay}"
                            HeaderContainerStyle="{StaticResource HeaderLeftAlign}"
                            HeaderTemplate="{StaticResource SortArrowNone}">
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Content="{x:Static s:guiStrings.HeaderSize}" Tag="Size" />
                            </GridViewColumn.Header>
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Path=Size}" TextAlignment="Right" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                    </GridView>
                </ListView.View>
            </local:ListViewEx>
            <Grid
                Name="PreviewPane"
                Grid.Column="2"
                SnapsToDevicePixels="True">
                <ScrollViewer
                    Name="ImageView"
                    Background="LightGray"
                    HorizontalScrollBarVisibility="Auto"
                    SizeChanged="PreviewSizeChanged"
                    VerticalScrollBarVisibility="Auto">
                    <Image
                        Name="ImageCanvas"
                        local:TouchScrolling.DraggingCursor="Images/Cursors/grabbing.cur"
                        local:TouchScrolling.IsEnabled="True"
                        Cursor="Images/Cursors/grab.cur"
                        RenderOptions.BitmapScalingMode="NearestNeighbor"
                        SnapsToDevicePixels="True"
                        Stretch="None"
                        UseLayoutRounding="True" />
                </ScrollViewer>
                <jv:TextViewer
                    x:Name="TextView"
                    BorderBrush="Black"
                    BorderThickness="1,0,0,0"
                    Visibility="Collapsed" />
            </Grid>
            <!--  Margin and BorderThickness help to react early on mouse pointer  -->
            <GridSplitter
                Grid.Column="1"
                Margin="-3,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Stretch"
                Background="Black"
                BorderBrush="Transparent"
                BorderThickness="3,0"
                Focusable="False"
                ShowsPreview="False" />
        </Grid>
    </DockPanel>
    <Window.InputBindings>
        <KeyBinding Command="{x:Static local:Commands.OpenFile}" Gesture="Ctrl+O" />
        <KeyBinding Command="{x:Static local:Commands.Exit}" Gesture="Ctrl+Q" />
        <KeyBinding Command="{x:Static local:Commands.FitWindow}" Gesture="Ctrl+H" />
        <KeyBinding Command="{x:Static local:Commands.SelectAll}" Gesture="Ctrl+A" />
        <KeyBinding Command="{x:Static local:Commands.Preferences}" Gesture="Ctrl+P" />
        <KeyBinding Command="{x:Static local:Commands.ScaleImage}" Gesture="Ctrl+S" />
        <KeyBinding Command="{x:Static local:Commands.GoBack}" Gesture="Backspace" />
        <KeyBinding Command="{x:Static local:Commands.GoBack}" Gesture="Alt+Left" />
        <KeyBinding Command="{x:Static local:Commands.GoForward}" Gesture="Alt+Right" />
        <KeyBinding Command="{x:Static local:Commands.HideMenuBar}" Gesture="Alt+Shift+M" />
        <KeyBinding Command="{x:Static local:Commands.HideToolBar}" Gesture="Alt+Shift+T" />
        <KeyBinding Command="{x:Static local:Commands.HideStatusBar}" Gesture="Alt+Shift+S" />
        <KeyBinding Command="{x:Static local:Commands.CreateArchive}" Gesture="F3" />
        <KeyBinding Command="{x:Static local:Commands.ExtractItem}" Gesture="F4" />
        <KeyBinding Command="{x:Static local:Commands.Refresh}" Gesture="F5" />
        <KeyBinding Command="{x:Static local:Commands.ConvertMedia}" Gesture="F6" />
        <KeyBinding Command="{x:Static local:Commands.DeleteItem}" Gesture="Delete" />
        <KeyBinding Command="{x:Static local:Commands.AddSelection}" Gesture="Add" />
        <KeyBinding Command="{x:Static local:Commands.NextItem}" Gesture="Space" />
    </Window.InputBindings>
    <Window.CommandBindings>
        <CommandBinding
            CanExecute="CanExecuteOnSelected"
            Command="{x:Static local:Commands.OpenItem}"
            Executed="OpenItemExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.OpenFile}"
            Executed="OpenFileExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.OpenRecent}"
            Executed="OpenRecentExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.AddSelection}"
            Executed="AddSelectionExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.SelectAll}"
            Executed="SelectAllExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.CopyNames}"
            Executed="CopyNamesExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.NextItem}"
            Executed="NextItemExec" />
        <CommandBinding
            CanExecute="CanExecuteExtract"
            Command="{x:Static local:Commands.ExtractItem}"
            Executed="ExtractItemExec" />
        <CommandBinding
            CanExecute="CanExecuteCreateArchive"
            Command="{x:Static local:Commands.CreateArchive}"
            Executed="CreateArchiveExec" />
        <CommandBinding
            CanExecute="CanExecuteOnPhysicalFile"
            Command="{x:Static local:Commands.DeleteItem}"
            Executed="DeleteItemExec" />
        <CommandBinding
            CanExecute="CanExecuteInDirectory"
            Command="{x:Static local:Commands.RenameItem}"
            Executed="RenameItemExec" />
        <CommandBinding
            CanExecute="CanExecuteInDirectory"
            Command="{x:Static local:Commands.ExploreItem}"
            Executed="ExploreItemExec" />
        <CommandBinding
            CanExecute="CanExecuteConvertMedia"
            Command="{x:Static local:Commands.ConvertMedia}"
            Executed="ConvertMediaExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.SortBy}"
            Executed="SortByExec" />
        <CommandBinding
            CanExecute="CanExecuteOnSelected"
            Command="{x:Static local:Commands.SetFileType}"
            Executed="SetFileTypeExec" />
        <CommandBinding
            CanExecute="CanExecuteGoBack"
            Command="{x:Static local:Commands.GoBack}"
            Executed="GoBackExec" />
        <CommandBinding
            CanExecute="CanExecuteGoForward"
            Command="{x:Static local:Commands.GoForward}"
            Executed="GoForwardExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.Refresh}"
            Executed="RefreshExec" />
        <CommandBinding
            CanExecute="CanExecuteFitWindow"
            Command="{x:Static local:Commands.FitWindow}"
            Executed="FitWindowExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.HideStatusBar}"
            Executed="HideStatusBarExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.HideMenuBar}"
            Executed="HideMenuBarExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.HideToolBar}"
            Executed="HideToolBarExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.About}"
            Executed="AboutExec" />
        <CommandBinding
            CanExecute="CanExecuteUpdate"
            Command="{x:Static local:Commands.CheckUpdates}"
            Executed="CheckUpdatesExec" />
        <CommandBinding
            CanExecute="CanExecutePlaybackControl"
            Command="{x:Static local:Commands.StopPlayback}"
            Executed="StopPlaybackExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.Preferences}"
            Executed="PreferencesExec" />
        <CommandBinding
            CanExecute="CanExecuteScaleImage"
            Command="{x:Static local:Commands.ScaleImage}"
            Executed="ScaleImageExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.TroubleShooting}"
            Executed="TroubleShootingExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.Descend}"
            Executed="DescendExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.Ascend}"
            Executed="AscendExec" />
        <CommandBinding
            CanExecute="CanExecuteAlways"
            Command="{x:Static local:Commands.Exit}"
            Executed="ExitExec" />
    </Window.CommandBindings>
</Window>
